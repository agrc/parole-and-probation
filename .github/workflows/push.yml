name: Push Events

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: write
  id-token: write
  deployments: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}

    steps:
      - name: ðŸš€ Create Release
        id: release
        uses: agrc/release-composite-action@v1
        with:
          prerelease: ${{ github.ref_name == 'dev' }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          github-app-id: ${{ secrets.UGRC_RELEASE_BOT_APP_ID }}
          github-app-key: ${{ secrets.UGRC_RELEASE_BOT_APP_KEY }}
          github-app-name: ${{ secrets.UGRC_RELEASE_BOT_NAME }}
          github-app-email: ${{ secrets.UGRC_RELEASE_BOT_EMAIL }}

  deploy-dev:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: release
    environment:
      name: dev
    if: github.ref_name == 'dev' && needs.release.outputs.release_created

    steps:
      - name: ðŸš€ Deploy
        uses: agrc/cloud-run-docker-deploy-composite-action@dev
        with:
          service: app
          docker-build-args: |
            VITE_DISCOVER=${{ secrets.UGRC_DISCOVER_KEY }}
            VITE_WEB_API=${{ secrets.UGRC_API_KEY }}
            VITE_PRINT_PROXY=${{ secrets.UGRC_PRINT_PROXY_URL }}
          flags: |
            --service-account=cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
            --vpc-connector=${{ secrets.VPC }}
            --vpc-egress=all-traffic
            --max-instances=5
            --concurrency=250
            --cpu=1
            --memory=512Mi
            --timeout=5m
          env-vars: >
            ASPNETCORE_URLS=http://+:8080,
            ASPNETCORE_ENVIRONMENT=Production
          mounted-secrets: |
            /secrets/dotnet/appsettings.Production.json=dotnet-appsettings:latest
          project-id: ${{ secrets.PROJECT_ID }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          identity-provider: ${{ secrets.IDENTITY_PROVIDER }}
          service-account-email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

  deploy-prod:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: release
    environment:
      name: prod
    if: github.ref_name == 'main' && needs.release.outputs.release_created

    steps:
      - name: ðŸš€ Deploy
        uses: agrc/cloud-run-docker-deploy-composite-action@dev
        with:
          service: app
          docker-build-args: |
            VITE_DISCOVER=${{ secrets.UGRC_DISCOVER_KEY }}
            VITE_PRINT_PROXY=${{ secrets.UGRC_PRINT_PROXY_URL }}
            VITE_WEB_API=${{ secrets.UGRC_API_KEY }}
          flags: |
            --service-account=cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com
            --vpc-connector=${{ secrets.VPC }}
            --vpc-egress=all-traffic
            --max-instances=5
            --concurrency=250
            --cpu=1
            --memory=512Mi
            --timeout=5m
          env-vars: >
            ASPNETCORE_URLS=http://+:8080,
            ASPNETCORE_ENVIRONMENT=Production
          mounted-secrets: |
            /secrets/dotnet/appsettings.Production.json=dotnet-appsettings:latest
          project-id: ${{ secrets.PROJECT_ID }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          identity-provider: ${{ secrets.IDENTITY_PROVIDER }}
          service-account-email: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          service-now-instance: ${{ secrets.SN_INSTANCE }}
          service-now-table: ${{ secrets.SN_TABLE }}
          service-now-system-id: ${{ secrets.SN_SYS_ID }}
          service-now-username: ${{ secrets.SN_USERNAME }}
          service-now-password: ${{ secrets.SN_PASSWORD }}
